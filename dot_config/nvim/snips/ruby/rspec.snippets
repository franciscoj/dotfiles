global !p
from dot.snips import inflector

real_path = vim.eval('expand("%:p")')
endglobal

snippet rspec "RSpec rails skeleton"
require 'rails_helper'

RSpec.describe ${1:`!p snip.rv = inflector.to_ruby(real_path) `} do
	$0
end
endsnippet

snippet spec "RSpec skeleton"
require 'spec_helper'

RSpec.describe ${1:`!p snip.rv = inflector.to_ruby(real_path) `} do
	$0
end
endsnippet

snippet co "context 'text' do ... end"
context '${1:contextName}' do
	$0
end
endsnippet

snippet de "describe 'text' do ... end"
describe '${1:describeName}' do
	$0
end
endsnippet

snippet it "it 'text' do ... end"
it '${1:text}' do
	$0
end
endsnippet

snippet itis "it { is_expected.to something }"
it { is_expected.to ${1:assertion} }
endsnippet

snippet	sub "subject { something }"
subject { ${1:described_class}$0 }
endsnippet

snippet let "let(:name) { value }"
let(:${1:name}) { ${2:${VISUAL}} }
endsnippet

snippet ldo "let(:name) do ... end"
let(:${1:name}) do
	${VISUAL}
end
endsnippet

snippet cre "create(:factory, ...)"
create(:${1:factory}${2:, ${3:arg}})
endsnippet

snippet bui "build(:factory, ...)"
build(:${1:factory}${2:, ${3:arg}})
endsnippet

snippet bs "build_stubbed(:factory, ...)"
build_stubbed(:${1:factory}${2:, ${3:arg}})
endsnippet

snippet exm "expect(obj).to receive(:message) { return }"
expect(${1:obj}).to receive(:${2:message})${3: { ${4:return} }}
endsnippet

snippet letd "let(:something) { instance_double(Something) }"
let(:${1:name}) { instance_double(${2:classname}) }
endsnippet

snippet ex "expect(subject).to something"
expect(${1:subject${2:.$3}}).to $0
endsnippet

snippet exb "expect { subject }.to something"
expect { ${1:subject} }
	.to $0
endsnippet

snippet dfac "FactoryBot.define do ... end"
FactoryBot.define do
	$0
end
endsnippet

snippet fac "factory :name, class: ClassName do ... end"
factory :${1:factory_name}, ${2:class: ${3:ClassName}} do
	$0
end
endsnippet

snippet ffi "field_name { field_value }"
${1:field_name} { ${2:$1} }
endsnippet
