global !p
from dot.snips import inflector
from dot.snips import rb_args

real_path = vim.eval('expand("%:p")')
current_indent = int(vim.eval('indent(".")/&shiftwidth'))

endglobal

snippet fro "# frozen_string_literal: true"
# frozen_string_literal: true

$0
endsnippet


snippet mod "module OutherModName ... end"
module ${1:`!p snip.rv = inflector.outer_ruby_module(real_path)`}
	$0
end
endsnippet

snippet mo "module Name VISUAL end"
module ${1:ModuleName}
	${VISUAL}
end
endsnippet

snippet cla "module InnerClassName ... end"
class ${1:`!p snip.rv = inflector.inner_ruby_class(real_path)`}
	$0
end
endsnippet

snippet defi "def initialize(arg:,) ... end"
def initialize(${1:arg})`!p rb_args.to_ruby_initializer(t[1], current_indent, snip)`
end
endsnippet

snippet def "def method_name(args...) ... end"
def ${1:method_name}${2:(${3:args})}
	$0
end
endsnippet

snippet defm "def method_name; @method_name ||= ..."
def ${1:method_name}
	@$1 ||= $0
end
endsnippet

snippet @= "@ivar = value"
@${1:var} = $0
endsnippet

snippet = "var = value"
${1:var} = value
endsnippet

snippet @@ "@arg = arg"
@${1:arg} = $1
endsnippet

snippet := "var: var" i
${1:${VISUAL}}: $1
endsnippet

snippet hash "key: { VISUAL }"
${1:key}: { ${VISUAL} }
endsnippet

snippet ar "attr_reader :attribute"
attr_reader :${1:attribute}
endsnippet

snippet pry "binding.pry"
binding.pry
endsnippet
