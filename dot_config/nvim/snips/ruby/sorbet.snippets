snippet tsig "extends T::Sig"
extend T::Sig
endsnippet

snippet ty "# typed: true"
# typed: true

$0
endsnippet

snippet tyf "# typed: false"
# typed: false

$0
endsnippet

snippet sig "sig do params(param: Type).returns(Type) end"
sig do
	$0
end
endsnippet

snippet par "params($0)"
params(
	$0
)
endsnippet

snippet si "sig { cursor }"
sig { $1 }
endsnippet

snippet part "param: Type(,)" i
${1:param}: ${2:type}${3:, }
endsnippet

snippet params "class SomethingParams < T::Struct ... end"
class ${1:Something}Params < T::Struct
	$0
end
endsnippet

snippet const "const :name, Type, default: x"
const :${1:name}, ${2:Type}${3:, default:${4: value}}
endsnippet

snippet nil "T.nilable(Type)" i
T.nilable(${1:${VISUAL}})
endsnippet

snippet tary "T::Array[Something]" i
T::Array[${1:${VISUAL}}]
endsnippet

snippet thash "T::Hash[Something, Something]" i
T::Hash[${1:T.untyped}, ${2:T.untyped}]
endsnippet

snippet trange "T::Range[Type]" i
T::Range[${1:${VISUAL}}]
endsnippet

snippet tbool "T::Boolean" i
T::Boolean
endsnippet

snippet tlet "T.let(val, Type)"
T.let(${1:${VISUAL}}, ${2: Type})
endsnippet

snippet tcast "T.cast(val, Type)"
T.cast(${1:${VISUAL}}, ${2: Type})
endsnippet

snippet tmust "T.must(val)" i
T.must(${1:${VISUAL}})
endsnippet

snippet tparams "some_params = TypedParams[SomeType].new.extract!(params)"
${1:action}_params = TypedParams[${1/.*/\u$0/}Params].new.extract!(params)
endsnippet

snippet rets "returns(Type)" i
returns(${1:${VISUAL}})
endsnippet

snippet tar "Typed attribute reader"
sig { returns(${1:Type}) }
attr_reader :${2:method_name}
endsnippet

snippet tstruct "class ${name} < T::Struct ... end"
class ${1:ClassName} < T::Struct
	$0
end
endsnippet
